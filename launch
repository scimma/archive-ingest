#!/bin/bash

## Change to directory of this script
cd "$(dirname "$(readlink -f "$0")")"
## Parse input arguments
ARG_START="true"
ARG_BUILD="false"
ARG_LOGS="false"
ARG_DOWN="false"
ARG_RESET="false"
CONFIG_FILE=".env"
PARAMS=""
while (( "$#" )); do
  case "$1" in
    -b|--build)
      ARG_BUILD="true"
      shift
      ;;
    -l|--logs)
      ARG_LOGS="true"
      shift
      ;;
    -d|--down)
      ARG_DOWN="true"
      ARG_START="false"
      shift
      ;;
    -r|--reset)
      ARG_RESET="true"
      ARG_START="false"
      shift
      ;;
    -c|--config)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        CONFIG_FILE=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        $0 -h
        exit 1
      fi
      ;;
    -h|--help)
      __usage="
      Launcher script for the SCiMMA Archive System

      Usage:  $0 [OPTIONS]

      -l, --logs            Follow container logs after startup
      -b, --build           Build the container images prior to running
      -d, --down            Stop all Docker containers
      -r, --reset           Stop all Docker containers and delete all persistent data
      "
      echo "$__usage"
      exit 0
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      $0 -h
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"


## Initialize environment config file
if [[ "${CONFIG_FILE}" == ".env" ]]
then
  if [[ ! -f "${CONFIG_FILE}" ]]; then
    echo "Environment config file \"${CONFIG_FILE}\" missing. Initializing..."
    cp env.tpl "${CONFIG_FILE}"
  else
    echo "Environment config file \"${CONFIG_FILE}\" already exists."
  fi
else
  if [[ ! -f "${CONFIG_FILE}" ]]; then
    echo "Specified config file \"${CONFIG_FILE}\" not found. Aborting."
    exit 1
  fi
fi

## Detect the Docker Compose base command
dc_version="$(docker-compose version 2>/dev/null)"
if [[ $? != 0 ]] ; then
  dc_version="$(docker compose version 2>/dev/null)"
  if [[ $? != 0 ]] ; then
    echo "Please install a supported version of Docker Compose (https://docs.docker.com/compose/install/)."
    exit 1
  else
    dc_cmd="docker compose"
  fi
else
  dc_cmd="docker-compose"
fi


## Launch CE within Docker
if [[ $ARG_START == "true" ]]
then
  if [[ $ARG_BUILD == "true" ]]
  then
    echo "Building images and launching app..."
    BUILD_IMG=" --build"
  else
    echo "Pulling images and launching app..."
    BUILD_IMG=""
  fi
  if [[ $ARG_LOGS == "true" ]]
  then
    FOLLOW_LOGS="${dc_cmd} logs -f"
  else
    FOLLOW_LOGS=""
  fi
  $dc_cmd up${BUILD_IMG} -d && $dc_cmd ps
  ${FOLLOW_LOGS}
  exit 0
fi
if [[ $ARG_RESET == "true" ]]
then
  echo "Stopping app and resetting data..."
  $dc_cmd down --volumes --remove-orphans
  exit 0
fi
if [[ $ARG_DOWN == "true" ]]
then
  echo "Stopping app..."
  $dc_cmd down
  exit 0
fi
