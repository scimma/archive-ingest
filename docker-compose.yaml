version: '3'

networks:
  internal:
    external: false

volumes:
  dbdata: {}
  archive-api-db: {}
  mongodbdata: {}
  objectstoredata: {}
  waitforit: {}

services:
  ## 
  ## MinIO: S3-compatible object store for archived message data
  ##
  object-store:
    image: quay.io/minio/minio:RELEASE.2023-01-31T02-24-19Z
    container_name: hop-archiver-object-store
    env_file: .env
    ports:
      - 127.0.0.1:9000:9000
      - 127.0.0.1:9001:9001
    networks:
      - internal
    command:
    - server
    - /data
    - --console-address
    - ":9001"
    volumes:
      - objectstoredata:/data
  ## 
  ## MongoDB: document database for archived message data
  ##
  mongo-db:
    image: mongo:4.4.19
    container_name: mongo-db
    env_file: .env
    ports:
      - 27017:27017
    networks:
      - internal
    volumes:
      - mongodbdata:/data
  ## 
  ## Archive database for storing Hopskotch message metadata from public topics
  ##
  archive-db:
    image: bitnami/postgresql:latest
    container_name: archive-db
    env_file: .env
    networks:
      - internal
    volumes:
      - dbdata:/bitnami/postgresql
  ## 
  ## Archiver initialization: Semaphore to await Archive database availability
  ##
  archiver-init-db:
    image: bitnami/postgresql:latest
    container_name: hop-archiver-db-init
    env_file: .env
    depends_on:
      - archive-db
    networks:
      - internal
    command:
      - sh
      - -c
      - >
        until pg_isready \
            --username=${POSTGRESQL_USERNAME} \
            --dbname=${POSTGRESQL_DATABASE} \
            --host=archive-db \
            --port=5432;
          do echo waiting for database;
          sleep 2;
          done;
          touch /tmp/db_ready;
    volumes:
      - waitforit:/tmp
  ## 
  ## Archiver system that ingests public Hopskotch topics and stores them 
  ## in the Archive database, the S3 store, and the Mongo database
  ##
  archiver:
    image: hub.ncsa.illinois.edu/scimma/archive-ingest:latest
    build:
      context: .
    container_name: hop-archiver
    env_file: .env
    networks:
      - internal
    command:
      - '/bin/bash'
      - '-c'
      - >
        while [[ ! -f /tmp/db_ready ]]; do
          echo waiting for db_ready...;
          sleep 2;
        done;
        bash copy_auth.sh && ./archive_ingest.py run -H hop-local -D local-db -S local-store --test_topic && sleep 1000d;
    volumes:
      - ./src:/root/src
      - waitforit:/tmp
  ## 
  ## Archive API server Django database
  ##
  archive-api-db:
    image: bitnami/postgresql:latest
    container_name: archive-api-db
    env_file: api/.env
    networks:
      - internal
    volumes:
      - archive-api-db:/bitnami/postgresql
  ## 
  ## Archive API initialization: Django database migration
  ##
  archive-api-init-django-migrate:
    image: hub.ncsa.illinois.edu/scimma/archive-api:dev
    build:
      context: ./api/
    container_name: archive-api-init-django-migrate
    env_file: api/.env
    networks:
      - internal
    command:
      - '/bin/bash'
      - '-c'
      - >
        while [[ ! -f /tmp/db_ready ]]; do
          echo waiting for database...;
          sleep 2;
        done;
        python manage.py migrate && python manage.py makemigrations && touch /tmp/migration_complete
    volumes:
      - ./api/src:/home/worker/src
      - waitforit:/tmp
      - archive-api-db:/bitnami/postgresql
  ## 
  ## Archive API initialization: create Django admin account if it does not exist
  ##
  archive-api-init-django-createsuperuser:
    image: hub.ncsa.illinois.edu/scimma/archive-api:dev
    build:
      context: ./api/
    container_name: archive-api-init-django-createsuperuser
    env_file: api/.env
    networks:
      - internal
    command:
      - '/bin/bash'
      - '-c'
      - >
        while [[ ! -f /tmp/migration_complete ]]; do
          echo waiting for database migration...;
          sleep 2;
        done;
        bash ../provisionsuperuser.sh && touch /tmp/superuser_created
    volumes:
      - ./api/src:/home/worker/src
      - waitforit:/tmp
  ## 
  ## Archive API server
  ##
  archive-api-server:
    image: hub.ncsa.illinois.edu/scimma/archive-api:dev
    build:
      context: ./api/
    container_name: archive-api-server
    env_file: api/.env
    ports:
      - 127.0.0.1:8000:8000
    networks:
      - internal
    command:
      - '/bin/bash'
      - '-c'
      - >
        while [[ ! -f /tmp/superuser_created ]]; do
          echo waiting for Django superuser provisioning...;
          sleep 2;
        done;
        python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./api/src:/home/worker/src
      - waitforit:/tmp
  ## 
  ## Archive browser web app
  ##
  archive-browser:
    image: hub.ncsa.illinois.edu/scimma/archive-browser:dev
    build:
      context: ./browser/
    container_name: archive-browser
    env_file: browser/.env
    ports:
      - 127.0.0.1:3000:3000
    networks:
      - internal
    # command:
    #   - '/bin/bash'
    #   - '-c'
    #   - yarn start
    volumes:
      - ./browser/src:/usr/src/app
